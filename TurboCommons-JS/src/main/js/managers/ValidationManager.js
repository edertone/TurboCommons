"use strict";

/**
 * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.
 *
 * Website : -> http://www.turbocommons.org
 * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.
 * License Url : -> http://www.apache.org/licenses/LICENSE-2.0
 * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com
 */

/** @namespace */
var org_turbocommons_src_main_js_managers = org_turbocommons_src_main_js_managers || {};


/**
 * Class that allows us to manage validation in an encapsulated way.
 * We can create as many instances as we want, and each instance will store the validation history and global validation state,
 * so we can use this class to validate complex forms or multiple elements globally
 * 
 * @class
 */
org_turbocommons_src_main_js_managers.ValidationManager = function(){


	/** Stores the current state for the applied validations (VALIDATION_OK / VALIDATION_WARNING / VALIDATION_ERROR) */
	this.validationStatus = 0;


	/** Stores the list of jquery elements that have generated a warning or error message, in the same order as happened. */
	this.failedElementsList = [];


	/** Stores the list of generated warning or error messages, in the same order as happened. */
	this.failedMessagesList = [];


	/** Stores the list of failure status codes, in the same order as happened. */
	this.failedStatusList = [];


	/** Stores the last error message generated by a validation error / warning or empty string if no validation errors happened */
	this.lastMessage = '';
};


/** 
 * Validation is correct
 * 
 * @constant {number}
 */
org_turbocommons_src_main_js_managers.ValidationManager.VALIDATION_OK = 0;


/** Validation is in a warning status constant
 *
 * @constant {number}
 */
org_turbocommons_src_main_js_managers.ValidationManager.VALIDATION_WARNING = 1;


/** 
 * Validation is on error status constant 
 * 
 * @constant {number}
 */
org_turbocommons_src_main_js_managers.ValidationManager.VALIDATION_ERROR = 2;


/**
 * Validation will fail if specified value is a false boolean
 *
 * @param value The bool to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isTrue = function(value, errorMessage, isWarning){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;

	var res = (!value) ? errorMessage : '';

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified value is not numeric
 *
 * @param value The number to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isNumeric = function(value, errorMessage, isWarning){

	// Set optional parameters default values
	errorMessage = (errorMessage === undefined) ? value + ' is not a number' : errorMessage;
	isWarning = (isWarning === undefined) ? false : isWarning;

	var res = (!(!isNaN(parseFloat(value)) && isFinite(value))) ? errorMessage : '';

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified value is not a string
 *
 * @param value The string to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isString = function(value, errorMessage, isWarning){

	// Set optional parameters default values
	errorMessage = (errorMessage === undefined) ? value + ' is not a string' : errorMessage;
	isWarning = (isWarning === undefined) ? false : isWarning;

	var res = (!(typeof value === 'string' || value instanceof String)) ? errorMessage : '';

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified value is not an array
 *
 * @param value The array to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isArray = function(value, errorMessage, isWarning){

	// Set optional parameters default values
	errorMessage = (errorMessage === undefined) ? value + ' is not an array' : errorMessage;
	isWarning = (isWarning === undefined) ? false : isWarning;

	var res = (!(Object.prototype.toString.call(value) === '[object Array]')) ? errorMessage : '';

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified text is empty
 *
 * @param text The text to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isRequired = function(text, errorMessage, isWarning){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;

	var res = '';

	if(StringUtils.isEmpty(text)){

		res = errorMessage;
	}

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified value is not a date with the specified format
 *
 * @param text The text to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 * @param inputformat The date format that we are validating. dd/mm/yyyy by default
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isDate = function(text, errorMessage, isWarning, required, inputformat){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;
	required = (required === undefined) ? true : required;
	inputformat = (inputformat === undefined) ? "dd/mm/yyyy" : inputformat;

	// Deferr required validation to the isRequired method
	if(required){

		if(!this.isRequired(text, errorMessage, isWarning)){

			return false;
		}

	}else{

		if(StringUtils.isEmpty(text)){

			return true;
		}
	}

	var res = '';

	// TODO: Prové de flex, repensar per a javascript

	return (res == '');
};


/**
 * Validation will fail if specified value is not a valid email
 *
 * @param text The text to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isMail = function(text, errorMessage, isWarning, required){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;
	required = (required === undefined) ? true : required;

	// Deferr required validation to the isRequired method
	if(required){

		if(!this.isRequired(text, errorMessage, isWarning)){

			return false;
		}

	}else{

		if(StringUtils.isEmpty(text)){

			return true;
		}
	}

	var res = '';

	// Test string for a valid email
	var testExp = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

	if(!testExp.test(text)){

		res = errorMessage;
	}

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified value is not the same as the specified original one
 *
 * @param text The text to validate that must be equal to the original one
 * @param originalText The original source text to compare
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isEqualToValue = function(text, originalText, errorMessage, isWarning, required){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;
	required = (required === undefined) ? true : required;

	// Deferr required validation to the isRequired method
	if(required){

		if(!this.isRequired(text, errorMessage, isWarning)){

			return false;
		}

	}else{

		if(StringUtils.isEmpty(text)){

			return true;
		}
	}

	var res = '';

	// Check text and original text
	if(text != originalText){

		res = errorMessage;
	}

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified text does not contain a minimum of N words.
 *
 * @param text The text to validate
 * @param minWords The minimum number of words that must be present on the text to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 * @param wordSeparator The character that is considered as the words separator
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isMinimumWords = function(text, minWords, errorMessage, isWarning, required, wordSeparator){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;
	required = (required === undefined) ? true : required;
	wordSeparator = (wordSeparator === undefined) ? ' ' : wordSeparator;

	// Deferr required validation to the isRequired method
	if(required){

		if(!this.isRequired(text, errorMessage, isWarning)){

			return false;
		}

	}else{

		if(StringUtils.isEmpty(text)){

			return true;
		}
	}

	var res = '';

	if(StringUtils.countWords(text, wordSeparator) < minWords){

		res = errorMessage;
	}

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified text does not match with a valid Spanish identification fiscal number
 *
 * @param text The text to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isNIF = function(text, errorMessage, isWarning, required){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;
	required = (required === undefined) ? true : required;

	// Deferr required validation to the isRequired method
	if(required){

		if(!this.isRequired(text, errorMessage, isWarning)){

			return false;
		}

	}else{

		if(StringUtils.isEmpty(text)){

			return true;
		}
	}

	var res = '';

	var isNif = false;
	var number;
	var l;
	var letter;
	var regExp = /^[XYZ]?\d{5,8}[A-Z]$/;
	var nif = text.toUpperCase();

	if(regExp.test(nif) === true){

		number = nif.substr(0, nif.length - 1);
		number = number.replace('X', 0);
		number = number.replace('Y', 1);
		number = number.replace('Z', 2);

		l = nif.substr(nif.length - 1, 1);

		number = number % 23;

		letter = 'TRWAGMYFPDXBNJZSQVHLCKET';
		letter = letter.substring(number, number + 1);

		isNif = (letter == l);
	}

	if(!isNif){

		res = errorMessage;
	}

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified text does not has a minimum length
 *
 * @param text The text to validate
 * @param minLen The minimum length for the specified text
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isMinimumLength = function(text, minLen, errorMessage, isWarning, required){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;
	required = (required === undefined) ? true : required;

	// Deferr required validation to the isRequired method
	if(required){

		if(!this.isRequired(text, errorMessage, isWarning)){

			return false;
		}

	}else{

		if(StringUtils.isEmpty(text)){

			return true;
		}
	}

	var res = '';

	if(text.length < minLen){

		res = errorMessage;
	}

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validation will fail if specified text does not contain a valid postal code
 *
 * @param text The text to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isPostalCode = function(text, errorMessage, isWarning, required){

	// TODO: aixo té força tela...
};


/**
 * Validation will fail if specified value is not a correct phone number
 *
 * @param text The text to validate
 * @param errorMessage The error message that will be generated if validation fails
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 * @param required True means the value is required
 *
 * @return False in case the validation fails or true if validation succeeds.
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isPhone = function(text, errorMessage, isWarning, required){

	// Set optional parameters default values
	isWarning = (isWarning === undefined) ? false : isWarning;
	required = (required === undefined) ? true : required;

	// Deferr required validation to the isRequired method
	if(required){

		if(!this.isRequired(text, errorMessage, isWarning)){

			return false;
		}

	}else{

		if(StringUtils.isEmpty(text)){

			return true;
		}
	}

	var res = '';

	var phoneValid = true;

	// Phone numeric digits must be 5 at least
	var digitsCount = text.replace(/[^0-9]/g, "").length;

	if(digitsCount < 6 || digitsCount > 15){

		phoneValid = false;
	}

	// Check that there are only allowed characters
	var allowedChars = "+- 1234567890()";

	for(var i = 0; i < text.length; i++){

		if(allowedChars.indexOf(text.charAt(i)) < 0){

			phoneValid = false;
		}
	}

	if(!phoneValid){

		res = errorMessage;
	}

	this._updateValidationStatus(res, isWarning);

	return (res == '');
};


/**
 * Validates the specified form using the different parameters specified as "data-" attributes which can be placed on the form itself or any of the elements to validate. Note that attributes defined on the elements take precedence over the attributes defined on the form element.
 * Following attributes can be used:<br><br>
 * - data-validationType: Specifies the type of validation applied (multiple types can be specified sepparated with spaces). Possible values are:<br>
 * &emsp;&emsp;required: The value is mandatory<br>
 * &emsp;&emsp;mail: Value must be an email address<br>
 * &emsp;&emsp;equalTo-selector: Value must be equal to the element (or elements) defined by the jquery 'selector'<br>
 * &emsp;&emsp;minWords-n: Value must contain at least n words<br>
 * &emsp;&emsp;nif: Value must be a valid spanish fiscal number<br>
 * &emsp;&emsp;minLen-n: Value string length must be at least n characters<br> 
 * &emsp;&emsp;postalCode: Value must be a valid postal code<br>
 * &emsp;&emsp;phone: Value must be a valid phone number<br><br>
 * - data-validationError: The error that will be generated once a validation for the specified element fails. We can define custom errors for each validation type by adding -validationType to the attribute.
 * For example: data-validationError-required="error message .." will apply only to the required validation type.  
 * 
 * @param form A jquery object representing the form to validate. We can pass an htm form element, or also a div containing inputs, buttons, and so.
 * @param throwAlert True by default. If enabled, a javascript alert will be thrown with the validation error when any validation fails.
 * @param invalidElementClass '' by default. Css class that will be applied to the elements that fail validation, so we can style them the way we want.
 * 
 * @returns True if validation was ok, false otherwise. Validation error / warning messages and elements history can be found on this class properties
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.isHtmlFormValid = function(form, throwAlert, invalidElementClass){

	// Set optional parameters default values
	throwAlert = (throwAlert === undefined) ? true : throwAlert;
	invalidElementClass = (invalidElementClass === undefined) ? '' : invalidElementClass;

	var validationManager = this;

	// As this method performs multiple validations, this validation manager object is reset at the beginning.
	validationManager.reset();

	var res = true;

	var errorMessage = StringUtils.isEmpty(form.attr("data-validationError")) ? 'Invalid form' : form.attr("data-validationError");

	// Loop all the form elements
	form.find(':input,textarea').each(function(){

		var validationTypes = $(this).attr("data-validationType");

		if(!StringUtils.isEmpty(validationTypes)){

			// Get the validation error message if it exists
			var validationError = $(this).attr("data-validationError");

			if(StringUtils.isEmpty(validationError)){

				validationError = errorMessage;
			}

			// Split the validation type in case there's more than one specified
			validationTypes = validationTypes.split(' ');

			// Get the element value to validate
			var elementValue = $(this).val();

			if($(this).is(':checkbox')){

				elementValue = $(this).is(":checked") ? 'true' : '';
			}

			// Loop all the validation types specified for this element
			for(var i = 0; i < validationTypes.length; i++){

				if(invalidElementClass != ''){

					$(this).removeClass(invalidElementClass);
				}

				// Split the validation type as it may contain type-value for some of the types like 'equalto-id'
				var validationType = validationTypes[i].split('-');

				// Check if a custom error for this validation type is specified
				if(!StringUtils.isEmpty($(this).attr("data-validationError-" + validationType[0]))){

					validationError = $(this).attr("data-validationError-" + validationType[0]);
				}

				switch(validationType[0]){

					case 'required':
						res = validationManager.isRequired(elementValue, validationError);
						break;

					case 'mail':
						res = validationManager.isMail(elementValue, validationError, false, false);
						break;

					case 'equalTo':
						res = validationManager.isEqualToValue(elementValue, $(validationType[1]).val(), validationError, false, false);
						break;

					case 'minWords':
						res = validationManager.isMinimumWords(elementValue, validationType[1], validationError, false, false, ' ');
						break;

					case 'nif':
						res = validationManager.isNIF(elementValue, validationError, false, false);
						break;

					case 'minLen':
						res = validationManager.isMinimumLength(elementValue, validationType[1], validationError, false, false);
						break;

					case 'postalCode':
						res = validationManager.isPostalCode(elementValue, validationError, false, false);
						break;

					case 'phone':
						res = validationManager.isPhone(elementValue, validationError, false, false);
						break;

					default:
						throw new Error("ValidationManager.isHtmlFormValid - Unknown validation type: " + validationType[0]);
				}

				if(!res){

					if(invalidElementClass != ''){

						$(this).addClass(invalidElementClass);
					}

					if(throwAlert){

						alert(validationManager.lastMessage);
					}

					validationManager.failedElementsList[validationManager.failedElementsList.length - 1] = $(this);

					return false;
				}
			}
		}
	});

	return res;
};


/** 
 * Reinitialize the validation status for this class
 * 
 * @return void
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype.reset = function(){

	// alias namespace
	var ns = org_turbocommons_src_main_js_managers;

	this.validationStatus = ns.ValidationManager.VALIDATION_OK;
	this.failedElementsList = [];
	this.failedMessagesList = [];
	this.failedStatusList = [];
	this.lastMessage = '';
};


/**
 * Check if specified validation result is valid and update the validation error status
 *
 * @param errorMessage The error message that results from a validation method
 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
 *
 * @return void
 */
org_turbocommons_src_main_js_managers.ValidationManager.prototype._updateValidationStatus = function(errorMessage, isWarning){

	// alias namespace
	var ns = org_turbocommons_src_main_js_managers;

	// If we are currently in an error state, nothing to do
	if(this.validationStatus == ns.ValidationManager.VALIDATION_ERROR){

		return;
	}

	// If the validation fails, we must change the validation status
	if(errorMessage != ""){

		this.failedElementsList.push(null);
		this.failedMessagesList.push(errorMessage);

		if(isWarning){

			this.failedStatusList.push(ns.ValidationManager.VALIDATION_WARNING);
			this.lastMessage = errorMessage;

		}else{

			this.failedStatusList.push(ns.ValidationManager.VALIDATION_ERROR);
			this.lastMessage = errorMessage;
		}

		if(isWarning && this.validationStatus != ns.ValidationManager.VALIDATION_ERROR){

			this.validationStatus = ns.ValidationManager.VALIDATION_WARNING;

		}else{

			this.validationStatus = ns.ValidationManager.VALIDATION_ERROR;
		}
	}
};