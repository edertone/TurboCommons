/**
 * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.
 *
 * Website : -> http://www.turbocommons.org
 * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.
 * License Url : -> http://www.apache.org/licenses/LICENSE-2.0
 * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com
 */
package org.turbocommons.managers;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Class that allows us to manage validation in an encapsulated way.
 * We can create as many instances as we want, and each instance will store the validation history and global validation state,
 * so we can use this class to validate complex forms or multiple elements globally
 */
public class ValidationManager {

	/** 
	 * Constant that defines the correct validation status
	 */
	public static final int VALIDATION_OK = 0;
	

	/** 
	 * Constant that defines the warning validation status
	 */
	public static final int VALIDATION_WARNING = 1;
	
	
	/** 
	 * Constant that defines the error validation status
	 */
	public static final int VALIDATION_ERROR = 2;
	
	
	/** Stores the current state for the applied validations (VALIDATION_OK / VALIDATION_WARNING / VALIDATION_ERROR) */
	public int validationStatus = 0;
	
	
	/** Stores the list of generated warning or error messages, in the same order as happened. */
	public List<String> failedMessagesList = new ArrayList<String>();
	
	
	/** Stores the list of failure status codes, in the same order as happened. */
	public List<Integer> failedStatusList = new ArrayList<Integer>();
	
	
	/** Stores the last error message generated by a validation error / warning or empty string if no validation errors happened */
	public String lastMessage = "";
	
	
	/**
	 * Validation will fail if specified value is not a true boolean value
	 *
	 * @param value A boolean expression to validate
	 * @param errorMessage The error message that will be generated if validation fails
	 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
	 *
	 * @return False in case the validation fails or true if validation succeeds.
	 */
	public Boolean isTrue(boolean value, Optional<String> errorMessage, Optional<Boolean> isWarning){
		
		// Set optional parameters default values
		String errorMes = (!errorMessage.isPresent()) ? "value is not true" : errorMessage.get();
		Boolean isWarn = (!isWarning.isPresent()) ? false : isWarning.get();

		String res = (value != true) ? errorMes : "";

		this._updateValidationStatus(res, isWarn);

		return (res == "");
	}
	
	
	/**
	 * Update the class validation Status depending on the provided error message.
	 *
	 * @param errorMessage The error message that's been generated from a previously executed validation method
	 * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
	 *
	 * @return void
	 */
	private void _updateValidationStatus(String errorMessage, Boolean isWarning){
		
		// TODO
	}
}


// TODO: Get all the missing part from javascript code
