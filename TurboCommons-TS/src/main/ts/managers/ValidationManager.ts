/**
 * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.
 *
 * Website : -> http://www.turbocommons.org
 * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.
 * License Url : -> http://www.apache.org/licenses/LICENSE-2.0
 * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vall√®s, Barcelona). http://www.edertone.com
 */
 

import { StringUtils } from '../utils/StringUtils';
import { NumericUtils } from '../utils/NumericUtils';
import { ArrayUtils } from '../utils/ArrayUtils';
import { ObjectUtils } from '../utils/ObjectUtils';
            
        
/**
 * Class that allows us to manage validation in an encapsulated way.
 * We can create as many instances as we want, and each instance will store the validation history and global validation state,
 * so we can use this class to validate complex forms or multiple elements globally
 */ 
export class ValidationManager{


    /** Constant that defines the correct validation status */
    static readonly VALIDATION_OK = 0;


    /** Constant that defines the warning validation status */
    static readonly VALIDATION_WARNING= 1;


    /** Constant that defines the error validation status */
    static readonly VALIDATION_ERROR = 2;
    

    /** Stores the current state for the applied validations (VALIDATION_OK / VALIDATION_WARNING / VALIDATION_ERROR) */
    validationStatus = 0;


    /** Stores the list of generated warning or error messages, in the same order as happened. */
    failedMessagesList:string[] = [];


    /** Stores the list of failure status codes, in the same order as happened. */
    failedStatusList:number[] = [];


    /** Stores the last error message generated by a validation error / warning or empty string if no validation errors happened */
    lastMessage = '';

    
    /**
     * Validation will fail if specified value is not a true boolean value
     *
     * @param value A boolean expression to validate
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isTrue(value:any, errorMessage = 'value is not true', isWarning = false){

        return this._updateValidationStatus(value === true, errorMessage, isWarning);
    }
    
    
    /**
     * Validation will fail if specified value is not a boolean
     *
     * @param value The boolean to validate
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isBoolean(value:any, errorMessage = 'value is not a boolean', isWarning = false){

        return this._updateValidationStatus((typeof (value) === 'boolean'), errorMessage, isWarning);
    }
    
    
    /**
     * Validation will fail if specified value is not numeric
     *
     * @param value The number to validate
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isNumeric(value:any, errorMessage = 'value is not a number', isWarning = false){

        return this._updateValidationStatus(NumericUtils.isNumeric(value), errorMessage, isWarning);
    }
    
    
    /**
     * Validation will fail if specified value is not a string
     *
     * @param $value The element to validate
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isString(value:any, errorMessage = 'value is not a string', isWarning = false){

        return this._updateValidationStatus(StringUtils.isString(value), errorMessage, isWarning);
    }
            
            
    /**
     * Validation will fail if specified value is not an url
     *
     * @param value The element to validate
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isUrl(value:any, errorMessage = 'value is not an URL', isWarning = false){

        return this._updateValidationStatus(StringUtils.isUrl(value), errorMessage, isWarning);
    }
    
    
    /**
     * Validation will fail if specified value is not an array
     *
     * @param value The array to validate
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isArray(value:any, errorMessage = 'value is not an array', isWarning = false){

        return this._updateValidationStatus(ArrayUtils.isArray(value), errorMessage, isWarning);
    }
    
    
    /**
     * Validation will fail if specified value is not an object
     *
     * @param value The object to validate
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isObject(value:any, errorMessage = 'value is not an object', isWarning = false){

        return this._updateValidationStatus(ObjectUtils.isObject(value), errorMessage, isWarning);
    }
    
    
    /**
     * Validation will fail if specified text is empty.<br>
     * See Stringutils.isEmpty to understand what is considered as an empty text
     *
     * @param value A text that must not be empty.
     * @param emptyChars Optional array containing a list of string values that will be considered as empty for the given string. This can be useful in some cases when we want to consider a string like 'NULL' as an empty string.
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @see Stringutils.isEmpty
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isFilledIn(value:any, emptyChars = [], errorMessage = 'value is required', isWarning = false){

        return this._updateValidationStatus(!StringUtils.isEmpty(value, emptyChars), errorMessage, isWarning);
    }
            
    
    isDate() {
    
        // TODO
        return false;
    }
    
    
    isMail() {
    
        // TODO
        return false;
    }
    
    
    /**
     * Validation will fail if specified elements are not identical.
     *
     * @param value First of the two objects to compare. Almost any type can be provided: ints, strings, arrays...
     * @param value2 Second of the two objects to compare. Almost any type can be provided: ints, strings, arrays...
     * @param errorMessage The error message that will be generated if validation fails
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return False in case the validation fails or true if validation succeeds.
     */
    isEqualTo(value:any, value2:any, errorMessage = 'values are not equal', isWarning = false){

        let res = false;

        // Compare elements depending on its type
        if(ArrayUtils.isArray(value) && ArrayUtils.isArray(value2)){

            res = ArrayUtils.isEqualTo(value, value2);

        }else{

            if(ObjectUtils.isObject(value) && ObjectUtils.isObject(value2)){

                res = ObjectUtils.isEqualTo(value, value2);

            }else{

                if(value === value2){

                    res = true;
                }
            }
        }

        return this._updateValidationStatus(res, errorMessage, isWarning);
    }
    
    
    isMinimumWords(string:string):boolean {
    
        // TODO
        return false;
    }
    
    
    isNIF(string:string):boolean {
    
        // TODO
        return false;
    }
    
    
    isMinimumLength(string:string):boolean {
    
        // TODO
        return false;
    }
    
    
    isPostalCode(string:string):boolean {
    
        // TODO
        return false;
    }
    
    
    isPhone(string:string):boolean {
    
        // TODO
        return false;
    }
    
    
    isHtmlFormValid(string:string):boolean {
    
        // TODO
        return false;
    }
    
    
    /** 
     * Reinitialize the validation status for this class
     * 
     * @returns void
     */
    reset() {
    
        this.validationStatus = ValidationManager.VALIDATION_OK;
        this.failedMessagesList = [];
        this.failedStatusList = [];
        this.lastMessage = '';
    }
    
    
    /**
     * Update the class validation Status depending on the provided error message.
     *
     * @param errorMessage The error message that's been generated from a previously executed validation method
     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning
     *
     * @return True if received errorMessage was '' (validation passed) or false if some error message was received (validation failed)
     */
    private _updateValidationStatus(result:boolean, errorMessage: string, isWarning: boolean){
        
        // If the validation fails, we must change the validation status
        if(!result){

            this.failedMessagesList.push(errorMessage);
            this.lastMessage = errorMessage;

            if(isWarning){

                this.failedStatusList.push(ValidationManager.VALIDATION_WARNING);

            }else{

                this.failedStatusList.push(ValidationManager.VALIDATION_ERROR);
            }

            if(isWarning && this.validationStatus != ValidationManager.VALIDATION_ERROR){

                this.validationStatus = ValidationManager.VALIDATION_WARNING;

            }else{

                this.validationStatus = ValidationManager.VALIDATION_ERROR;
            }
        }

        return result;
    }
}
