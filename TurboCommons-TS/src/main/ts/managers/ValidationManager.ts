/**
 * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.
 *
 * Website : -> http://www.turbocommons.org
 * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.
 * License Url : -> http://www.apache.org/licenses/LICENSE-2.0
 * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vall√®s, Barcelona). http://www.edertone.com
 */
 
namespace org_turbocommons_managers {
 
 
    import BaseStrictClass = org_turbocommons_src_main_ts_model.BaseStrictClass;
    
    
    /**
     * Class that allows us to manage validation in an encapsulated way.
     * We can create as many instances as we want, and each instance will store the validation history and global validation state,
     * so we can use this class to validate complex forms or multiple elements globally
     * 
     * @class
     */ 
    export class ValidationManager extends BaseStrictClass{
    
    
        /** Constant that defines the correct validation status */
        static readonly VALIDATION_OK:number = 0;
    
    
        /** Constant that defines the warning validation status */
        static readonly VALIDATION_WARNING:number = 1;
    
    
        /** Constant that defines the error validation status */
        static readonly VALIDATION_ERROR:number = 2;
        
    
        /** Stores the current state for the applied validations (VALIDATION_OK / VALIDATION_WARNING / VALIDATION_ERROR) */
        public validationStatus:number = 0;
    
    
        /** Stores the list of generated warning or error messages, in the same order as happened. */
        public failedMessagesList:string[] = [];
    
    
        /** Stores the list of failure status codes, in the same order as happened. */
        public failedStatusList:number[] = [];
    
    
        /** Stores the last error message generated by a validation error / warning or empty string if no validation errors happened */
        public lastMessage:String = '';
    
    
        /**
         * Validation will fail if specified value is not a true boolean value
         *
         * @param {boolean} value A boolean expression to validate
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isTrue(value:boolean, errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var StringUtils = org_turbocommons_utils.StringUtils;
            
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'value is not true' : errorMessage;
            
            var res:string = value !== true ? errorMessage : '';
        
            return this._updateValidationStatus(res, isWarning);
        }
        
        
        /**
         * Validation will fail if specified value is not a boolean type
         *
         * @param {any} value The bool to validate
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isBoolean(value:any, errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var StringUtils = org_turbocommons_utils.StringUtils;
           
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'value is not a boolean' : errorMessage;
           
            var res:string = (typeof (value) !== 'boolean') ? errorMessage : '';
        
            return this._updateValidationStatus(res, isWarning);
        }
        
        
        /**
         * Validation will fail if specified value is not numeric
         *
         * @param {any} value The element to validate
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isNumeric(value:any, errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var StringUtils = org_turbocommons_utils.StringUtils;
           
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'value is not a number' : errorMessage;
            
            var res:string = (!(!isNaN(parseFloat(value)) && isFinite(value))) ? errorMessage : '';
        
            return this._updateValidationStatus(res, isWarning);
        }
        
        
        /**
         * Validation will fail if specified value is not a string
         *
         * @param {string} value The element to validate
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isString(value:any, errorMessage:string = '', isWarning:boolean = false):boolean {
            
            var StringUtils = org_turbocommons_utils.StringUtils;
            
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'value is not a string' : errorMessage;
            
            var res:string = (!StringUtils.isString(value)) ? errorMessage : '';
        
            return this._updateValidationStatus(res, isWarning);
        }
                
                
        /**
         * Validation will fail if specified value is not a correct internet url.
         * Note that correct urls always start with a scheme (http://, ftp://....)
         *
         * @param {string} value The element to validate
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isUrl(value:any, errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var validationManager = new org_turbocommons_managers.ValidationManager();
        
            // Set optional parameters default values
            errorMessage = (!validationManager.isFilledIn(errorMessage)) ? 'value is not an URL' : errorMessage;
            
            var res:string = errorMessage;
        
            if(validationManager.isFilledIn(value) && validationManager.isString(value)){
        
                // This amazingly good solution's been found at http://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url
                var urlRegex = '^(?!mailto:)(?:(?:http|https|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$';
        
                res = !(value.length < 2083 && (new RegExp(urlRegex, 'i')).test(value)) ? errorMessage : '';
            }
        
            return this._updateValidationStatus(res, isWarning);
        }
        
        
        /**
         * Validation will fail if specified value is not an array
         *
         * @param {array} value The array to validate
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isArray(value:any, errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var StringUtils = org_turbocommons_utils.StringUtils;
            var ArrayUtils = org_turbocommons_utils.ArrayUtils;
            
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'value is not an array' : errorMessage;
            
            var res:string = (!ArrayUtils.isArray(value)) ? errorMessage : '';
        
            return this._updateValidationStatus(res, isWarning);
        }
        
        
        /**
         * Validation will fail if specified value is not an object
         *
         * @param {object} value The object to validate
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isObject(value:any, errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var StringUtils = org_turbocommons_utils.StringUtils;
            var ObjectUtils = org_turbocommons_utils.ObjectUtils;
            
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'value is not an object' : errorMessage;
            
            var res:string = (!ObjectUtils.isObject(value)) ? errorMessage : '';
        
            return this._updateValidationStatus(res, isWarning);
        }
        
        
        /**
         * Validation will fail if specified text is empty.<br>
         * See Stringutils.isEmpty to understand what is considered as an empty text
         * 
         * @see Stringutils.isEmpty
         *
         * @param {string} value A text that must not be empty.
         * @param {array} emptyChars Optional array containing a list of string values that will be considered as empty for the given string. This can be useful in some cases when we want to consider a string like 'NULL' as an empty string.     
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isFilledIn(value:string, emptyChars:string[] = [], errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var StringUtils = org_turbocommons_utils.StringUtils;
        
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'value is required' : errorMessage;
           
            var res:string = StringUtils.isEmpty(value, emptyChars) ? errorMessage : '';
        
            return this._updateValidationStatus(res, isWarning);
        }
                
        
        public isDate(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        public isMail(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        /**
         * Validation will fail if specified elements are not identical. 
         *
         * @param  {object} value First of the two objects to compare. Almost any type can be provided: ints, strings, arrays...
         * @param {object} value2 Second of the two objects to compare. Almost any type can be provided: ints, strings, arrays...
         * @param {string} errorMessage The error message that will be generated if validation fails
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} False in case the validation fails or true if validation succeeds.
         */
        public isEqualTo(value:any, value2:any, errorMessage:string = '', isWarning:boolean = false):boolean {
        
            var validationManager = new org_turbocommons_managers.ValidationManager();
            var StringUtils = org_turbocommons_utils.StringUtils;
            var ArrayUtils = org_turbocommons_utils.ArrayUtils;
            var ObjectUtils = org_turbocommons_utils.ObjectUtils;
        
            // Set optional parameters default values
            errorMessage = StringUtils.isEmpty(errorMessage) ? 'values are not equal' : errorMessage;
                        
            var res:string = errorMessage;
        
            // Compare elements depending on its type
            if(validationManager.isArray(value) && validationManager.isArray(value2)){
        
                res = ArrayUtils.isEqualTo(value, value2) ? '' : res;
        
            }else{
        
                if(validationManager.isObject(value) && validationManager.isObject(value2)){
        
                    res = ObjectUtils.isEqualTo(value, value2) ? '' : res;
        
                }else{
        
                    if(value === value2){
        
                        res = '';
                    }
                }
            }
        
            return this._updateValidationStatus(res, isWarning);
        }
        
        
        public isMinimumWords(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        public isNIF(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        public isMinimumLength(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        public isPostalCode(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        public isPhone(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        public isHtmlFormValid(string:string):boolean {
        
            // TODO
            return false;
        }
        
        
        /** 
         * Reinitialize the validation status for this class
         * 
         * @returns void
         */
        public reset() {
        
            this.validationStatus = ValidationManager.VALIDATION_OK;
            this.failedMessagesList = [];
            this.failedStatusList = [];
            this.lastMessage = '';
        }
        
        
        /**
         * Update the class validation Status depending on the provided error message.
         *
         * @param {string} errorMessage The error message that's been generated from a previously executed validation method
         * @param {boolean} isWarning Tells if the validation fail will be processed as a validation error or a validation warning
         *
         * @returns {boolean} True if received errorMessage was '' (validation passed) or false if some error message was received (validation failed)
         */
        private _updateValidationStatus(errorMessage:string, isWarning:boolean) {
        
            // If the validation fails, we must change the validation status
            if(errorMessage != ''){
        
                this.failedMessagesList.push(errorMessage);
                this.lastMessage = errorMessage;
                
                if(isWarning){
        
                    this.failedStatusList.push(ValidationManager.VALIDATION_WARNING);
        
                }else{
        
                    this.failedStatusList.push(ValidationManager.VALIDATION_ERROR);
                }
        
                if(isWarning && this.validationStatus != ValidationManager.VALIDATION_ERROR){
        
                    this.validationStatus = ValidationManager.VALIDATION_WARNING;
        
                }else{
        
                    this.validationStatus = ValidationManager.VALIDATION_ERROR;
                }
            }
        
            return errorMessage == '';
        }
    }
}
