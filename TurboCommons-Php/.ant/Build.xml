<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="Build" basedir=".">


	<description>
	
		Turbo Framework PHP ant project builder.
		Used to automatize the most common development build operations related to turbo framework projects.
		Recommended for eclipse, but may work well on other ides. 
			
		VERY IMPORTANT !! 
		An extra library is required to execute FTP operations with ant. Download it here:	http://commons.apache.org/net/index.html
		and copy it to:	C:\Program Files\eclipse\plugins\org.apache.ant_1.8.2.v20110505-1300\lib
		Then go to "Window/Preferences/Ant/Runtime/ClassPath" and add this lib as an external jar to "Ant home entries" (Say yes to ignore possible problem if prompted)
	
	</description>
		
	
	<!-- Define all the build global properties and load the build configuration from the Setup-build.xml file -->
	<target name="defineGlobalProperties" >
	
		<!-- Create a property containing the current project name, based on the root project folder -->
		<basename property="projectBaseName" file="../" />
		
		<!-- The location for the project source folder -->
		<property name="srcFolderPath" location="../src" />

		<!-- The loaction for the project main folder -->
		<property name="mainFolderPath" location="../src/main" />

		<!-- The location for the target folder -->
		<property name="targetFolderPath" location="../target" />

		<!-- The location for the cache file, which contains modified files since last build. This path can be overwritten by external builds that want to execute this project build but track the cache externally -->
		<property name="cacheFilePath" location="cache.properties" />
	
		<fail message="Setup-Build.xml not found">
		    <condition>
		    	<not>
		    		<available file="${srcFolderPath}/../Setup-Build.xml" />
		    	</not>
		    </condition>
		</fail>
		
		<xmlproperty file="${srcFolderPath}/../Setup-Build.xml" keepRoot="false" semanticattributes="true" />
		
		<!-- Set default values for some properties in case they are not specified on the Setup-build.xml -->
		<property name="Build.versionNumber" value="0.0" />
		<property name="Build.createPhars" value="true" />
		<property name="Build.createMergedJs" value="false" />
		<property name="Build.keepUnPackedFiles" value="false" />
				
		<property name="Release.enable" value="false" />
		<property name="Release.phpDoc" value="false" />
		<property name="Release.jsDoc" value="false" />
		<property name="Release.changeLog" value="false" />
		<property name="Release.optimizePictures" value="true" />
		<property name="Release.optimizePhp" value="true" />
		<property name="Release.optimizeJs" value="true" />
		<property name="Release.optimizeCss" value="true" />
		<property name="Release.useForDeploy" value="false" />
								
		<property name="Test.runTests" value="false" />
		
		<property name="Deploy.localHostDeploy" value="false" />
		<property name="Deploy.localHostPath" value="C:\xampp\htdocs\" />
		<property name="Deploy.localHostIgnore" value="" />
		<property name="Deploy.ftpDeploy" value="false" />
		<property name="Deploy.ftpFolder" value="/" />
		<property name="Deploy.ftpIgnore" value="" />
		<property name="Deploy.ftpServer" value="" />
		<property name="Deploy.ftpUser" value="" />
		<property name="Deploy.ftpPsw" value="" />
		
		<property name="Tools.minifierPath" value="C:/BuildTools/yuicompressor-2.4.7/build/yuicompressor-2.4.7.jar" />
		<property name="Tools.htmlCompressorPath" value="C:/BuildTools/htmlcompressor/htmlcompressor-1.5.3.jar" />
		<property name="Tools.pngQuantPath" value="C:/BuildTools/pngquant-windows/pngquant.exe" />
		<property name="Tools.pngOptimizerPath" value="C:/BuildTools/optipng-0.7.4-win32/optipng.exe" />
		<property name="Tools.jpgOptimizerPath" value="C:/BuildTools/jpegtran/jpegtran.exe" />
		<property name="Tools.mysqlPath" value="C:/xampp/mysql/bin/mysql.exe" />	
		<property name="Tools.phpDocPath" value="C:/BuildTools/PhpDocumentor/phpDocumentor.phar" />
		<property name="Tools.phpPath" value="C:/xampp/php/php.exe" />
				
	</target>
	
	
	<!-- The main build task that executes all the build tasks as defined on the setup-build.xml file -->
	<target name="build" depends="defineGlobalProperties">

		<!-- Get the current build number from the build.number file and store it on the ${build.number} property -->
		<loadproperties srcFile="build.number"/>
		
		<!-- Increase the project build number. We will increase it even if the build fails, to prevent overlapping files from different builds -->
		<buildnumber/>
			
		<!-- Perform all the build tasks -->
		<script language="javascript">
			<![CDATA[
				
				self.project.executeTarget("copyMainFiles");
			
				if(project.getProperty("Test.runTests") == "true"){
					self.project.executeTarget("runTests");
				}
			
				if(project.getProperty("Release.enable") == "true"){
					self.project.executeTarget("createReleaseVersion");
				}
			
				if(project.getProperty("Build.createPhars") == "true"){
					self.project.executeTarget("createPhars");
				}
			
				if(project.getProperty("Build.keepUnPackedFiles") != "true"){
					self.project.executeTarget("removeUnpackedFiles");
				}
			
		    ]]>
		</script>
				
	</target>
	
	
	<!-- Copy all the project src/main files to the target folder. Any unwanted files/folders are excluded -->
	<target name="copyMainFiles">
		
		<!-- Delete all files inside the target/projectName except the main folder one -->
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${targetFolderPath}/${projectBaseName}" casesensitive="false">
				<include name="**/*"/>
				<exclude name="main/"/>
			</fileset>			
		</delete>
		
		<!-- Update the target/projectName/main folder with the current project state -->
		<sync todir="${targetFolderPath}/${projectBaseName}/main" overwrite="true">
			<fileset dir="${mainFolderPath}" casesensitive="false">
				<exclude name="**/thumbs.db**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/.git**" />
			</fileset>
		</sync>
		
	</target>
	
	
	<!-- Launch the unit tests on console only if autorun property is set -->
	<target name="runTests">

		<!-- Test.localHostTestPath must exist -->
		<fail message="Test.localHostTestPath not found. A local server folder is required to run unit tests.">
		    <condition>
		    	<not>
		    		<available file="${Test.localHostTestPath}" />
		    	</not>
		    </condition>
		</fail>

		<copy todir="${Test.localHostTestPath}/${projectBaseName}-unitTests/main" overwrite="true">
			<fileset dir="${targetFolderPath}/${projectBaseName}/main" casesensitive="false" />
		</copy>
			
		<copy todir="${Test.localHostTestPath}/${projectBaseName}-unitTests/test" overwrite="true">
			<fileset dir="${srcFolderPath}/test" casesensitive="false" />
		</copy>
		
		<exec executable="${Tools.phpPath}" failonerror="true" >
			<arg value="${Test.localHostTestPath}/${projectBaseName}-unitTests/test/index.php" />
		</exec>

		<delete dir="${Test.localHostTestPath}/${projectBaseName}-unitTests" failonerror="true" />

	</target>
	
	
	<!-- Create the optimized release version and tag it with the current version and build number -->
	<target name="createReleaseVersion">

		<script language="javascript">
			<![CDATA[
				
				importPackage(Packages.org.apache.tools.ant.types);
			   	importClass(java.io.File);
			
				var targetFolderPath = project.getProperty("targetFolderPath");
				var projectBaseName = project.getProperty("projectBaseName");
				var buildVersionNumber = project.getProperty("Build.versionNumber");
				var buildNumber = project.getProperty("build.number");
				var releaseOptimizePictures = project.getProperty("Release.optimizePictures");
				var releaseOptimizePhp = project.getProperty("Release.optimizePhp");
				var releaseOptimizeHtml = project.getProperty("Release.optimizeHtml");
				var releaseOptimizeJs = project.getProperty("Release.optimizeJs");
				var releaseOptimizeCss = project.getProperty("Release.optimizeCss");
									
				var fs = new FileSet();
		      	fs.setDir(new File(targetFolderPath + "/" + projectBaseName));
				fs.setCaseSensitive(false);
			
				var fsExcludes = [];
			
				if(project.getProperty("Release.phpDoc") == "true"){
					self.project.executeTarget("createPhpDoc");
				}
			
				if(project.getProperty("Release.jsDoc") == "true"){
					self.project.executeTarget("createJsDoc");
				}
			
				if(project.getProperty("Release.changeLog") == "true"){
					self.project.executeTarget("createChangeLog");
				}
			
				if(releaseOptimizePictures == "true"){
					fsExcludes.push("**/*.png");
					fsExcludes.push("**/*.jpg");
				}

				if(releaseOptimizePhp == "true"){					
					fsExcludes.push("**/*.php");
				}
			
				if(releaseOptimizeHtml == "true"){					
					// TODO
				}
						
				if(releaseOptimizeJs == "true"){				
					fsExcludes.push("**/*.js");
				}
			
				if(releaseOptimizeCss == "true"){							
					fsExcludes.push("**/*.css");
				}
						
				fs.setExcludes(fsExcludes.join(" "));
			   			
				var c = project.createTask("copy");
				c.setTodir(new File(targetFolderPath + "/" + projectBaseName + "-" + buildVersionNumber + "." + buildNumber));
				c.setOverwrite(true);
		
				c.addFileset(fs);
				c.execute();
			
				// Call the ant tasks
				if(releaseOptimizePictures == "true"){
					
					self.project.executeTarget("minifyPNG");
					self.project.executeTarget("minifyJPG");
				}
			
				if(releaseOptimizePhp == "true"){
					self.project.executeTarget("minifyPHP");
				}
			
				if(releaseOptimizeHtml == "true"){
					self.project.executeTarget("minifyHTML");
				}
			
				if(releaseOptimizeJs == "true"){
					self.project.executeTarget("minifyJS");
				}
			
				if(releaseOptimizeCss == "true"){
					self.project.executeTarget("minifyCSS");
				}
			
		    ]]>
		</script>

	</target>
	
	
	<!-- Generate the php documentation from source code -->
	<target name="createPhpDoc">

		<mkdir dir="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/doc/php"/>
		
		<exec executable="${Tools.phpPath}" failonerror="true" outputproperty="createPhpDocOutputRedir">
			<arg value="${Tools.phpDocPath}" />
			<arg value="--template=&quot;responsive-twig&quot;" />
			<arg value="--visibility=&quot;public&quot;" />
			<arg value="--title=&quot;${projectBaseName}-${Build.versionNumber}.${build.number}&quot;" />
			<arg value="-d" />
			<arg value="${targetFolderPath}/${projectBaseName}/main/php" />
			<arg value="-t" />
			<arg value="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/doc/php" />
		</exec>
		
	</target>
	
	
	<!-- Generate the js documentation from source code -->
	<target name="createJsDoc">

		<!-- TODO -->
		<mkdir dir="${targetFolderPath}/${projectBaseName}/doc/js"/>

	</target>
	
	
	<!-- Create changelog based on a git repository -->
	<target name="createChangeLog">

		<!-- Create the changelog file -->
		<mkdir dir="${targetFolderPath}/${projectBaseName}/changelog"/>
		<touch file="${targetFolderPath}/${projectBaseName}/changelog/changelog.txt"/>
		
		<!-- Get the date for the last tag on the current git repo -->
		<exec executable="git" failonerror="true" outputproperty="gitLastTagDate">
	        <arg line="show -s --format=%ad 'git rev-list --tags --max-count=1'"/>
	    </exec>
		
		<exec executable="git" failonerror="true" output="${targetFolderPath}/${projectBaseName}/changelog/changelog.txt">
	        <arg line="log --oneline --pretty=format:'%ad: %s' --date=short --since='${gitLastTagDate}'"/>
	    </exec>  
			    
	</target>
	
	
	<!-- Apply minification to all the PNG files -->
	<target name="minifyPNG">

		<!-- 
			Apply the massively powerful pngquant compression tool: Override the png files on the target folder with an optimized version.
			If the optimizer cannot generate an optimized version of a quality between 56-72, the original will remain untouched
		 -->
		<apply executable="${Tools.pngQuantPath}" failonerror="false">

			<fileset dir="${targetFolderPath}/${projectBaseName}/main" casesensitive="false">
				<include name="**/*.png" />
			</fileset>

			<arg line="-f" />
			<arg line="--ext .png" />
			<arg line="--speed 1" />
			<arg line="--quality=60-98" />

		</apply>

		<!-- Apply the optipng compression tool to the target folder pngs, and copy them to the release folder -->
		<apply executable="${Tools.pngOptimizerPath}" failonerror="true">

			<fileset dir="${targetFolderPath}/${projectBaseName}/main" casesensitive="false">
				<include name="**/*.png" />
			</fileset>

			<arg value="-quiet" />
			<arg value="-o7" />
			<srcfile />
			<arg value="-out" />
			<targetfile />
			
			<mapper type="glob" from="*.png" to="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main/*.png" />

		</apply>

	</target>
	
	
	<!-- Apply minification to all the JPG files -->
	<target name="minifyJPG">

		<apply executable="${Tools.jpgOptimizerPath}" failonerror="true">

			<fileset dir="${targetFolderPath}/${projectBaseName}/main" casesensitive="false">
				<include name="**/*.jpg" />
			</fileset>

			<arg value="-copy" />
			<arg value="none" />
			<arg value="-optimize" />
			<arg value="-outfile" />
			<targetfile />
			<srcfile />

			<mapper type="glob" from="*.jpg" to="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main/*.jpg" />

		</apply>

	</target>


	<!-- Apply minification to all the PHP files -->
	<target name="minifyPHP">

		<!-- Php files may contain html code. They are stored with .phpTemp extension so they can be processed later by the html minifier -->
		<apply executable="${Tools.phpPath}" failonerror="true" outputproperty="minifyPHPOutputRedir">

			<fileset dir="${targetFolderPath}/${projectBaseName}/main" casesensitive="false">
				<include name="**/*.php" />
			</fileset>

			<arg value="-w" />
			<srcfile />

			<redirector>
				<outputmapper id="out" type="glob" from="*.php" to="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main/*.phpTemp" />
			</redirector>

		</apply>
		
		<apply executable="java" failonerror="true">

			<fileset dir="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main">
				<include name="**/*.phpTemp" />
			</fileset>

			<mapper type="glob" from="*.phpTemp" to="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main/*.php" />

			<arg line="-jar" />
			<arg path="${Tools.htmlCompressorPath}" />
			<arg line="--preserve-php" />
			<arg line="-o" />
			<targetfile />
			<srcfile />

		</apply>

		<!-- Clean the phpTemp marked files -->
		<delete>
			<fileset dir="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main">
				<include name="**/*.phpTemp" />
			</fileset>
		</delete>

	</target>
	
	<!-- Compress html and php files that may contain inlined html. Those are marked with .phpTemp extension -->
	<target name="minifyHTML">

		<!-- TODO -->		

	</target>
	
	
	<!-- Generate the phar file from the files on the target folder if phar generation is enabled on setup build xml -->
	<target name="createPhars">

		<!-- Autoloader.php must exist on src/main/php/ for the phar to be correctly generated -->
		<fail message="src/main/php/AutoLoader.php not found. This is required to create a phar that loads classes automatically">
		    <condition>
		    	<not>
		    		<available file="${mainFolderPath}/php/AutoLoader.php" />
		    	</not>
		    </condition>
		</fail>
		
		<!--Define the contents for the stub file that will be autoexecuted when the phar file is included -->
		<property name="phpStubFile" value="&lt;?php Phar::mapPhar(); include \'phar://${projectBaseName}.phar/php/AutoLoader.php\'; __HALT_COMPILER(); ?>"/>
		
		<!-- Create the phar using the current project name and version -->
		<exec executable="${Tools.phpPath}" failonerror="true">
			<arg value="-d display_errors" />
			<arg value="-r" />
			<arg value="$p = new Phar('${targetFolderPath}/${projectBaseName}/${projectBaseName}.phar', FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::KEY_AS_FILENAME, '${projectBaseName}.phar'); $p->startBuffering(); $p->setStub('${phpStubFile}'); $p->buildFromDirectory('${targetFolderPath}/${projectBaseName}/main'); $p->stopBuffering();" />
		</exec>
		
		<script language="javascript">
			<![CDATA[
				
				if(project.getProperty("Release.enable") == "true"){
					self.project.executeTarget("createPharsRelease");
				}
			
		    ]]>
		</script>
		
	</target>
	
	
	<!-- Generate the release version phars -->
	<target name="createPharsRelease">

		<!-- Create the phar using the current project name and version -->
		<exec executable="${Tools.phpPath}" failonerror="true">
			<arg value="-d display_errors" />
			<arg value="-r" />
			<arg value="$p = new Phar('${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/${projectBaseName}-${Build.versionNumber}.${build.number}.phar', FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::KEY_AS_FILENAME, '${projectBaseName}-${Build.versionNumber}.${build.number}.phar'); $p->startBuffering(); $p->setStub('${phpStubFile}'); $p->buildFromDirectory('${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main'); $p->stopBuffering();" />
		</exec>
			
	</target>
	
	
	<!-- Removes all the unpacked files on the target folder -->
	<target name="removeUnpackedFiles">		
		<delete dir="${targetFolderPath}/${projectBaseName}/main" failonerror="true" />
		<delete dir="${targetFolderPath}/${projectBaseName}-${Build.versionNumber}.${build.number}/main" failonerror="false" />
	</target>
	
	
	<!-- Clean the project by removing the target folder -->
	<target name="clean" depends="defineGlobalProperties">
		<delete file="${cacheFilePath}" failonerror="true" />
		<delete dir="${targetFolderPath}" failonerror="true" />
	</target>

</project>